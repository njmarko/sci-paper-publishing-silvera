/**
    Use this file to implement business logic. This file will be preserved
    during next compilations.

    Generated by: silvera
    Date: 2022-05-21 19:30:36
*/

package com.silvera.UserService.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.silvera.UserService.domain.model.*;
import com.silvera.UserService.repository.*;
import com.silvera.UserService.service.base.*;

import java.util.Optional;


@Service
public class UserServiceService implements IUserServiceService {


    private final UserRepository userRepository;

    

    @Autowired
    public UserServiceService(UserRepository userRepository){
        super();
        this.userRepository = userRepository;
    }

    // Auto-generated CRUD methods
    

    
    
    
    @Override
    public String authenticate(AuthRequest authRequest) {
        Optional<User> existing = userRepository.findByUsername(authRequest.getUsername());
        User user =  existing.orElseThrow(IllegalArgumentException::new);
        if(!user.getPassword().equals(authRequest.getPassword())){
            throw new IllegalArgumentException("Wrong username or password!");
        }
        user.setLoggedIn(true);
        userRepository.save(user);
        return "User " + authRequest.getUsername() + " logged in successfully!";
    }
    
    
    
    @Override
    public java.lang.String register(User user) {
        user.setLoggedIn(false);
        Optional<User> existing = userRepository.findByUsername(user.getUsername());
        if (existing.isPresent()){
            throw new IllegalArgumentException("Username " + user.getUsername() + " is already in use!");
        }
        userRepository.save(user);
        return "User registration was successful!";
    }
    
    
    
    @Override
    public java.lang.Boolean isLoggedIn(java.lang.String username) {
        Optional<User> existing = userRepository.findByUsername(username);
        return existing.orElseThrow(IllegalArgumentException::new).getLoggedIn();
    }
    
    
    
    @Override
    public java.lang.String getName(java.lang.String username) {
        Optional<User> existing = userRepository.findByUsername(username);
        User user =  existing.orElseThrow(IllegalArgumentException::new);
        return user.getFirstName() + " " + user.getLastName();
    }
    

}