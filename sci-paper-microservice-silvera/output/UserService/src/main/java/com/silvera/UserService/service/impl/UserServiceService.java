/**
    Use this file to implement business logic. This file will be preserved
    during next compilations.

    Generated by: silvera
    Date: 2022-05-21 10:59:21
*/

package com.silvera.UserService.service.impl;

import java.util.Optional;
import org.springframework.stereotype.Service;
import com.silvera.UserService.domain.model.*;
import com.silvera.UserService.repository.*;
import com.silvera.UserService.service.base.*;

import org.springframework.beans.factory.annotation.Autowired;





@Service
public class UserServiceService implements IUserServiceService {

    

    
    
    @Autowired
    AuthRequestRepository authrequestRepository;
    
    
    @Autowired
    AuthResponseRepository authresponseRepository;
    
    
    @Autowired
    UserRepository userRepository;
    

    public UserServiceService(){
        super();
    }

    // Auto-generated CRUD methods
    
    
    @Override
    public AuthRequest createAuthRequest(AuthRequest authrequest){
        authrequestRepository.save(authrequest);
        Optional<AuthRequest> opt = authrequestRepository.findById(authrequest.getId());
        return opt.orElse(null);
    }

    @Override
    public AuthRequest updateAuthRequest(java.lang.String id, AuthRequest authrequestUpdate){
        AuthRequest entity = this.readAuthRequest(id);
        authrequestRepository.save(authrequestUpdate);
        return authrequestUpdate;
    }

    @Override
    public AuthRequest readAuthRequest(java.lang.String id){
        Optional<AuthRequest> opt = authrequestRepository.findById(id);
        return opt.orElseThrow(IllegalArgumentException::new);
    }

    @Override
    public void deleteAuthRequest(java.lang.String id){
        AuthRequest entity = readAuthRequest(id);
        authrequestRepository.delete(entity);
    }
    
    
    @Override
    public AuthResponse createAuthResponse(AuthResponse authresponse){
        authresponseRepository.save(authresponse);
        Optional<AuthResponse> opt = authresponseRepository.findById(authresponse.getId());
        return opt.orElse(null);
    }

    @Override
    public AuthResponse updateAuthResponse(java.lang.String id, AuthResponse authresponseUpdate){
        AuthResponse entity = this.readAuthResponse(id);
        authresponseRepository.save(authresponseUpdate);
        return authresponseUpdate;
    }

    @Override
    public AuthResponse readAuthResponse(java.lang.String id){
        Optional<AuthResponse> opt = authresponseRepository.findById(id);
        return opt.orElseThrow(IllegalArgumentException::new);
    }

    @Override
    public void deleteAuthResponse(java.lang.String id){
        AuthResponse entity = readAuthResponse(id);
        authresponseRepository.delete(entity);
    }
    
    
    @Override
    public User createUser(User user){
        userRepository.save(user);
        Optional<User> opt = userRepository.findById(user.getId());
        return opt.orElse(null);
    }

    @Override
    public User updateUser(java.lang.String id, User userUpdate){
        User entity = this.readUser(id);
        userRepository.save(userUpdate);
        return userUpdate;
    }

    @Override
    public User readUser(java.lang.String id){
        Optional<User> opt = userRepository.findById(id);
        return opt.orElseThrow(IllegalArgumentException::new);
    }

    @Override
    public void deleteUser(java.lang.String id){
        User entity = readUser(id);
        userRepository.delete(entity);
    }
    

    
    
    
    @Override
    public AuthResponse authenticate(AuthRequest authRequest) {
        /*
            TODO: Implement this function!!!
        */
        throw new java.lang.UnsupportedOperationException("Not implemented yet.");
    }
    
    
    
    @Override
    public java.lang.String register(User user) {
        /*
            TODO: Implement this function!!!
        */
        throw new java.lang.UnsupportedOperationException("Not implemented yet.");
    }
    
    
    
    @Override
    public java.lang.Boolean isLoggedIn(java.lang.String jwt) {
        /*
            TODO: Implement this function!!!
        */
        throw new java.lang.UnsupportedOperationException("Not implemented yet.");
    }
    
    
    
    @Override
    public java.lang.String getName(java.lang.String jwt) {
        /*
            TODO: Implement this function!!!
        */
        throw new java.lang.UnsupportedOperationException("Not implemented yet.");
    }
    

}